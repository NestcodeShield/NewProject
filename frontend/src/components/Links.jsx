import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import AuthModal from "./AuthModal";
import { FaUserCircle } from "react-icons/fa"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
import "./Links.css"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

function Links() {
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const token = localStorage.getItem("token");
    const storedUser = localStorage.getItem("user");
    if (token && storedUser) {
      setIsLoggedIn(true);
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const handleLogin = async ({ username, password }) => {
    try {
      const response = await fetch("http://localhost:5000/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      }

      console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:", data);
      localStorage.setItem("token", data.token);
      localStorage.setItem("user", JSON.stringify(data.user));
      setIsLoggedIn(true); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setIsAuthModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error.message);
      alert(error.message);
    }
  };

  const handleRegister = async ({ username, email, password }) => {
    try {
      const response = await fetch("http://localhost:5000/api/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, email, password }),
      });

      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      }

      console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", data);
      await handleLogin({ username, password }); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
      alert(error.message);
    }
  };

  return (
    <>
      <div className="Links">
        <div className="container">
          <ul className="information">
            <li>–ü—É–Ω–∫—Ç 1</li>
            <li>–ü—É–Ω–∫—Ç 2</li>
            <li>–ü—É–Ω–∫—Ç 3</li>
          </ul>
          <div className="buttons">
            {isLoggedIn ? (
              <Link to="/profile" className="user-icon">
                <FaUserCircle size={24} /> {/* –ò–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              </Link>
            ) : (
              <button className="log" onClick={() => setIsAuthModalOpen(true)}>
                –í—Ö–æ–¥ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </button>
            )}
            <button className="announcement">
              <Link to="/announcement">–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</Link>
            </button>
          </div>
        </div>
      </div>

      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        onLogin={handleLogin}
        onRegister={handleRegister}
      />
    </>
  );
}

export default Links;
